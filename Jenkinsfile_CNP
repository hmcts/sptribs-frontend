#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig

def type = "nodejs"
def product = "sptribs"
def component = "frontend"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def secrets = [
  'sptribs-${env}': [
    secret('idam-ui-secret', 'IDAM_SECRET'),
    secret('citizen-user', 'CITIZEN_USERNAME'),
    secret('citizen-password', 'CITIZEN_PASSWORD'),
    secret('specialTribunals-cic-pcq-token', 'PCQ_TOKEN'),
    secret('s2s-secret-sptribs-frontend', 'SERVICE_AUTH_SECRET')
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def branchesToSync = ['demo', 'perftest', 'ithc', 'preview']
def pipelineConf = new AppPipelineConfig()

pipelineConf.vaultSecrets = secrets


withPipeline(type, product, component) {
  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)
  loadVaultSecrets(secrets)

  afterSuccess('build') {
    yarnBuilder.yarn('build')
  }
  before('functionalTest:preview') {
    env.SPTRIBS_FRONTEND_URL = "https://sptribs-frontend-pr-${CHANGE_ID}.preview.platform.hmcts.net/?edgecaseType=CIC"
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:preview') {
    env.SPTRIBS_FRONTEND_URL = "https://sptribs-frontend-pr-${CHANGE_ID}.preview.platform.hmcts.net/?edgecaseType=CIC"
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:aat') {
    env.SPTRIBS_FRONTEND_URL = "https://sptribs-frontend-staging.aat.platform.hmcts.net/?edgecaseType=CIC"
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:aat') {
    env.ADOP_WEB_URL = "https://sptribs-frontend-staging.aat.platform.hmcts.net/?edgecaseType=CIC"
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  afterAlways('smoketest:preview') {
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('smoketest:aat') {
    publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/smoke",
            reportFiles          : "index.html",
            reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('checkout') {
    builder.gradle('generateCCDConfig')
    generateDefinitions()
  }

  onPR {
    env.ENVIRONMENT="preview"
    env.CASE_API_URL = "http://sptribs-case-api-pr-${CHANGE_ID}-java"
    env.CCD_DEF_NAME = "preview"
    env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.CASE_DATA_STORE_BASEURL = "https://ccd-data-store-api-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.CASE_DOCUMENT_AM_BASEURL= "http://ccd-case-document-am-api-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.TEST_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CITIZEN_UPDATE_CASE_STATE_ENABLED=true
    env.SERVICE_AUTH_MICROSERVICE = "sptribs_case_api"
    env.SERVICE_AUTH_PROVIDER_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.TEST_E2E_URL = "https://xui-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"

    setCommonEnvVariables()
    setFeatureFlags(env.ENVIRONMENT)

    def githubApi = new GithubAPI(this)
    if (!githubApi.getLabelsbyPattern(env.BRANCH_NAME, "keep-helm")) {
      enableCleanupOfHelmReleaseOnSuccess()
    }
  }
}
